median = median(Quantity, na.rm = TRUE),
w_mean2 = weighted.mean(Quantity, Rating),
)
summary_stat
hist(scaled_df$Rating)
sub <- subset(scaled_df, Ingredient == "all purpose flour")
weighted.hist(sub$Quantity,sub$Rating)
hist(sub$Quantity)
ggplot(scaled_df, aes(Ingredient, Quantity, colour = Rating)) +
geom_quasirandom()
within(scaled_df, stan <- ave(Quantity, Ingredient, FUN = stdz))
library(weights)
install.packages('weights')
library(weights)
within(scaled_df, stan <- ave(Quantity, Ingredient, FUN = stdz))
scores <- within(scaled_df, stan <- ave(Quantity, Ingredient, FUN = stdz))
length(scores)
View(scores)
scaled_df <- within(scaled_df, stan <- ave(Quantity, Ingredient, FUN = stdz))
View(scaled_df)
scaled_df <- within(scaled_df, stan <- ave(Quantity, Ingredient, FUN = stdz)) %>%
subset(stan < 3)
scaled_df <- within(scaled_df, stan <- ave(Quantity, Ingredient, FUN = stdz)) %>%
subset(abs(stan) =< 3)
scaled_df <- within(scaled_df, stan <- ave(Quantity, Ingredient, FUN = stdz)) %>%
subset(abs(stan) <= 3)
summary_stat <- scaled_df %>% group_by(Ingredient) %>% summarise(mean = mean(Quantity, na.rm = TRUE),
median = median(Quantity, na.rm = TRUE),
w_mean2 = weighted.mean(Quantity, Rating),
)
summary_stat
hist(scaled_df$Rating)
sub <- subset(scaled_df, Ingredient == "all purpose flour")
weighted.hist(sub$Quantity,sub$Rating)
hist(sub$Quantity)
ggplot(scaled_df, aes(Ingredient, Quantity, colour = Rating)) +
geom_quasirandom()
scaled_df <- within(scaled_df, stan <- ave(Quantity, Ingredient, FUN = stdz)) %>%
subset(abs(stan) <= 3) # Because anything more than 3 std. deviations out of the mean is likely to be a scaling error, remove these
summary_stat <- scaled_df %>% group_by(Ingredient) %>% summarise(mean = mean(Quantity, na.rm = TRUE),
median = median(Quantity, na.rm = TRUE),
w_mean2 = weighted.mean(Quantity, Rating),
)
summary_stat
summary_stat <- scaled_df %>% group_by(Ingredient) %>% summarise(mean = mean(Quantity, na.rm = TRUE),
median = median(Quantity, na.rm = TRUE),
w_mean = weighted.mean(Quantity, Rating),
)
ggplot(scaled_df, aes(Ingredient, Quantity, colour = Rating)) +
geom_quasirandom()
summary_stat <- scaled_df %>% group_by(Ingredient) %>% summarise(mean = mean(Quantity, na.rm = TRUE),
median = median(Quantity, na.rm = TRUE),
w_mean = weighted.mean(Quantity, Rating))
summary_stat
ggplot(scaled_df, aes(Ingredient, Quantity, colour = Rating)) +
geom_quasirandom()
df_other <- subset(df, Ingredient == "other")
View(df_salt)
View(df_other)
View(df)
library(ggplot2)
library(dplyr)
library(reshape2)
df1 <- read.csv("ingredient_measures_AllRecipes.csv")
df1$Recipe_Index <- paste("AR_", df1$Recipe_Index)
df2 <- read.csv("ingredient_measures_Epicurious.csv")
df2$Recipe_Index <- paste("E_", df2$Recipe_Index)
df3 <- read.csv("ingredient_measures_Misc.csv")
df3$Recipe_Index <- paste("Misc_", df3$Recipe_Index)
View(df3)
source('~/NLP/Pudding_Cookie/0_Merge_Ingredients.R', echo=TRUE)
df1 <- read.csv("ingredient_measures_AllRecipes.csv")
df1$Recipe_Index <- paste("AR_", df1$Recipe_Index)
df2 <- read.csv("ingredient_measures_Epicurious.csv")
df2$Recipe_Index <- paste("E_", df2$Recipe_Index)
df3 <- read.csv("ingredient_measures_Misc.csv")
df3$Recipe_Index <- paste("Misc_", df3$Recipe_Index)
big_df <- rbind(df1,df2)
big_df <- rbind(big_df, df3)
big_df <- big_df[!(is.na(big_df$Ingredient) | big_df$Ingredient==""), ]
big_df$Text <- gsub(",","",big_df$Text)
write.table(big_df, file = "Big_Ingredient_List.csv", quote = FALSE, row.names = FALSE, dec = '.', sep = ',')
rm(list = ls())
df <- read.csv("Big_Ingredient_List.csv", row.names = NULL)
ingred_list <- unique(df$Ingredient)
with(big_df, table(Ingredient))
rm(list = ls())
df <- read.csv("Big_Ingredient_List.csv", row.names = NULL)
ingred_list <- unique(df$Ingredient)
with(big_df, table(Ingredient))
vars <- colsplit(df$Text, " ", c("Quantity","Description"))
df$Quantity <- as.numeric(vars$Quantity)
df$Description <- vars$Description
df <- subset(df, Quantity != "NA")
df <- mutate(df, Unit = ifelse(grepl("cup",Description),"cup",
ifelse(grepl("tablespoon|tbsp", Description),"tablespoon",
ifelse(grepl("teaspoon|tsp", Description), "teaspoon",
ifelse(grepl("ounce", Description), "ounce",
ifelse(grepl("pound", Description), "pound",
ifelse(grepl("egg",Description), "egg", "other")))))))
table(df$Unit)
df <- subset(df, Unit != "other") # Remove things in unusual units
freqfunc <- function(x, n){
tail(sort(table(unlist(strsplit(as.character(x), ", ")))), n)
}
tbsp2cup <- function(x){
tbsp_ix <- which(x$Unit == "tablespoon")
amount <- x[tbsp_ix, 5]
scaled_amount <- amount*0.0625
x[tbsp_ix,5] <- scaled_amount
x[tbsp_ix,7] <- "cup"
return(x)
}
tsp2cup <- function(x){
tbsp_ix <- which(x$Unit == "teaspoon")
amount <- x[tbsp_ix, 5]
scaled_amount <- amount*0.0208333
x[tbsp_ix,5] <- scaled_amount
x[tbsp_ix,7] <- "cup"
return(x)
}
tsp2tbsp <- function(x){
tbsp_ix <- which(x$Unit == "teaspoon")
amount <- x[tbsp_ix, 5]
scaled_amount <- amount*(1/3)
x[tbsp_ix,5] <- scaled_amount
x[tbsp_ix,7] <- "tablespoon"
return(x)
}
tbsp2tsp <- function(x){
tbsp_ix <- which(x$Unit == "tablespoon")
amount <- x[tbsp_ix, 5]
scaled_amount <- amount*3
x[tbsp_ix,5] <- scaled_amount
x[tbsp_ix,7] <- "teaspoon"
return(x)
}
cup2tbsp <- function(x){
tbsp_ix <- which(x$Unit == "cup")
amount <- x[tbsp_ix, 5]
scaled_amount <- amount/0.0625
x[tbsp_ix,5] <- scaled_amount
x[tbsp_ix,7] <- "tablespoon"
return(x)
}
cup2tsp <- function(x){
tbsp_ix <- which(x$Unit == "cup")
amount <- x[tbsp_ix, 5]
scaled_amount <- amount/0.0208333
x[tbsp_ix,5] <- scaled_amount
x[tbsp_ix,7] <- "teaspoon"
return(x)
}
pkg2oz <- function(x){
tbsp_ix <- which(x$Unit == "ounce")
# Is it in ounces already or is it describing a package?
df_tmp <- subset(x, x$Unit == "ounce")
y <- which(grepl("[[:digit:]]",df_tmp[,3]))
amount <- df_tmp[y, 2]
regexp <- "[[:digit:]]+\\.?[[:digit:]]+"
scale_factor <- as.numeric(str_extract(df_tmp[y,3],regexp))
scaled_amount = amount * scale_factor
df_tmp[y,2] <- scaled_amount
df_tmp[y,3] <- paste("ounces" , df_tmp[1,1])
x[tbsp_ix,] <- df_tmp
return(x)
}
oz2cup <- function(x){
tbsp_ix <- which(x$Unit == "ounce")
amount <- x[tbsp_ix, 5]
scaled_amount <- amount/8
x[tbsp_ix,5] <- scaled_amount
x[tbsp_ix,7] <- "cup"
return(x)
}
pd2oz <- function(x){
tbsp_ix <- which(x$Unit == "pound")
amount <- x[tbsp_ix, 5]
scaled_amount <- amount/16
x[tbsp_ix,5] <- scaled_amount
x[tbsp_ix,7] <- "ounce"
return(x)
}
cup2oz <- function(x){
tbsp_ix <- which(x$Unit == "cup")
amount <- x[tbsp_ix, 2]
scaled_amount <- amount*8
x[tbsp_ix,2] <- scaled_amount
x[tbsp_ix,4] <- "ounce"
return(x)
}
df_choc <- subset(df, Ingredient == "chocolate chip")
table(df_choc$Unit)
df_choc <- pd2oz(df_choc)
df_choc <- oz2cup(df_choc)
df_choc <- tbsp2cup(df_choc)
hist(df_choc$Quantity)
df_egg <- subset(df,Ingredient == "egg")
df_bs <- subset(df,Ingredient == "baking soda")
table(df_bs$Unit)
df_bs <- cup2tsp(df_bs)
df_sugar <- subset(df, Ingredient == "sugar")
table(df_sugar$Unit)
df_sugar <- tbsp2cup
df_sugar <- tsp2cup(df_sugar)
df_ve <- subset(df, Ingredient == "vanilla")
table(df_ve$Unit)
df_ve <- cup2tbsp(df_ve)
df_ve <- tbsp2tsp(df_ve)
df_ve <- subset(df_ve, Unit != "ounce")
df_flour <- subset(df, Ingredient == "all purpose flour")
table(df_flour$Unit)
df_flour <- tbsp2cup(df_flour)
df_salt <- subset(df, Ingredient == "salt")
table(df_salt$Unit)
df_salt <- tbsp2tsp(df_salt)
df_salt <- subset(df_salt, Unit != "cup")
df_brsug <- subset(df, Ingredient == "brown sugar")
table(df_brsug$Unit)
df_brsug <- tbsp2cup(df_brsug)
df_butter <- subset(df, Ingredient == "butter")
table(df_butter$Unit)
df_butter <- tbsp2cup(df_butter)
df_butter <-subset(df_butter, !(Unit %in% c("ounce","pound")))
df_walnuts <- subset(df, Ingredient == "walnut")
table(df_walnuts$Unit)
scaled_df <- rbind(df_walnuts,df_butter,df_brsug, df_salt, df_flour, df_ve, df_egg, df_bs, df_sugar, df_choc)
scaled_df$Quantity <- as.numeric(scaled_df$Quantity)
scaled_df$Rating <- as.numeric(scaled_df$Rating)
scaled_df <- within(scaled_df, stan <- ave(Quantity, Ingredient, FUN = stdz)) %>%
subset(abs(stan) <= 3) # Because anything more than 3 std. deviations out of the mean is likely to be a scaling error, remove these
scaled_df <- rbind(df_walnuts,df_butter,df_brsug, df_salt, df_flour, df_ve, df_egg, df_bs, df_sugar, df_choc)
scaled_df <- rbind(df_walnuts,df_butter,df_brsug, df_salt, df_flour, df_ve, df_egg, df_bs, df_sugar, df_choc)
library(ggplot2)
library(dplyr)
library(reshape2)
df1 <- read.csv("ingredient_measures_AllRecipes.csv")
df1$Recipe_Index <- paste("AR_", df1$Recipe_Index)
df2 <- read.csv("ingredient_measures_Epicurious.csv")
df2$Recipe_Index <- paste("E_", df2$Recipe_Index)
df3 <- read.csv("ingredient_measures_Misc.csv")
df3$Recipe_Index <- paste("Misc_", df3$Recipe_Index)
big_df <- rbind(df1,df2)
big_df <- rbind(df1,df2,df3)
big_df <- big_df[!(is.na(big_df$Ingredient) | big_df$Ingredient==""), ]
big_df$Text <- gsub(",","",big_df$Text)
big_df <- na.omit(big_df)
big_df$Text <- gsub(",","",big_df$Text)
write.table(big_df, file = "Big_Ingredient_List.csv", quote = FALSE, row.names = FALSE, dec = '.', sep = ',')
rm(list = ls())
df <- read.csv("Big_Ingredient_List.csv", row.names = NULL)
ingred_list <- unique(df$Ingredient)
with(big_df, table(Ingredient))
vars <- colsplit(df$Text, " ", c("Quantity","Description"))
df$Quantity <- as.numeric(vars$Quantity)
rm(list = ls())
rm(list = ls())
df <- read.csv("Big_Ingredient_List.csv", row.names = NULL)
ingred_list <- unique(df$Ingredient)
with(big_df, table(Ingredient))
with(df, table(Ingredient))
vars <- colsplit(df$Text, " ", c("Quantity","Description"))
df$Quantity <- as.numeric(vars$Quantity)
df$Description <- vars$Description
df <- subset(df, Quantity != "NA")
df <- mutate(df, Unit = ifelse(grepl("cup",Description),"cup",
ifelse(grepl("tablespoon|tbsp", Description),"tablespoon",
ifelse(grepl("teaspoon|tsp", Description), "teaspoon",
ifelse(grepl("ounce", Description), "ounce",
ifelse(grepl("pound", Description), "pound",
ifelse(grepl("egg",Description), "egg", "other")))))))
table(df$Unit)
df <- subset(df, Unit != "other") # Remove things in unusual units
freqfunc <- function(x, n){
tail(sort(table(unlist(strsplit(as.character(x), ", ")))), n)
}
tbsp2cup <- function(x){
tbsp_ix <- which(x$Unit == "tablespoon")
amount <- x[tbsp_ix, 5]
scaled_amount <- amount*0.0625
x[tbsp_ix,5] <- scaled_amount
x[tbsp_ix,7] <- "cup"
return(x)
}
tsp2cup <- function(x){
tbsp_ix <- which(x$Unit == "teaspoon")
amount <- x[tbsp_ix, 5]
scaled_amount <- amount*0.0208333
x[tbsp_ix,5] <- scaled_amount
x[tbsp_ix,7] <- "cup"
return(x)
}
tsp2tbsp <- function(x){
tbsp_ix <- which(x$Unit == "teaspoon")
amount <- x[tbsp_ix, 5]
scaled_amount <- amount*(1/3)
x[tbsp_ix,5] <- scaled_amount
x[tbsp_ix,7] <- "tablespoon"
return(x)
}
tbsp2tsp <- function(x){
tbsp_ix <- which(x$Unit == "tablespoon")
amount <- x[tbsp_ix, 5]
scaled_amount <- amount*3
x[tbsp_ix,5] <- scaled_amount
x[tbsp_ix,7] <- "teaspoon"
return(x)
}
cup2tbsp <- function(x){
tbsp_ix <- which(x$Unit == "cup")
amount <- x[tbsp_ix, 5]
scaled_amount <- amount/0.0625
x[tbsp_ix,5] <- scaled_amount
x[tbsp_ix,7] <- "tablespoon"
return(x)
}
cup2tsp <- function(x){
tbsp_ix <- which(x$Unit == "cup")
amount <- x[tbsp_ix, 5]
scaled_amount <- amount/0.0208333
x[tbsp_ix,5] <- scaled_amount
x[tbsp_ix,7] <- "teaspoon"
return(x)
}
pkg2oz <- function(x){
tbsp_ix <- which(x$Unit == "ounce")
# Is it in ounces already or is it describing a package?
df_tmp <- subset(x, x$Unit == "ounce")
y <- which(grepl("[[:digit:]]",df_tmp[,3]))
amount <- df_tmp[y, 2]
regexp <- "[[:digit:]]+\\.?[[:digit:]]+"
scale_factor <- as.numeric(str_extract(df_tmp[y,3],regexp))
scaled_amount = amount * scale_factor
df_tmp[y,2] <- scaled_amount
df_tmp[y,3] <- paste("ounces" , df_tmp[1,1])
x[tbsp_ix,] <- df_tmp
return(x)
}
oz2cup <- function(x){
tbsp_ix <- which(x$Unit == "ounce")
amount <- x[tbsp_ix, 5]
scaled_amount <- amount/8
x[tbsp_ix,5] <- scaled_amount
x[tbsp_ix,7] <- "cup"
return(x)
}
pd2oz <- function(x){
tbsp_ix <- which(x$Unit == "pound")
amount <- x[tbsp_ix, 5]
scaled_amount <- amount/16
x[tbsp_ix,5] <- scaled_amount
x[tbsp_ix,7] <- "ounce"
return(x)
}
cup2oz <- function(x){
tbsp_ix <- which(x$Unit == "cup")
amount <- x[tbsp_ix, 2]
scaled_amount <- amount*8
x[tbsp_ix,2] <- scaled_amount
x[tbsp_ix,4] <- "ounce"
return(x)
}
df_choc <- subset(df, Ingredient == "chocolate chip")
table(df_choc$Unit)
df_choc <- pd2oz(df_choc)
df_choc <- oz2cup(df_choc)
df_choc <- tbsp2cup(df_choc)
hist(df_choc$Quantity)
df_egg <- subset(df,Ingredient == "egg")
df_bs <- subset(df,Ingredient == "baking soda")
table(df_bs$Unit)
df_bs <- cup2tsp(df_bs)
df_sugar <- subset(df, Ingredient == "sugar")
table(df_sugar$Unit)
df_sugar <- tbsp2cup
df_sugar <- tsp2cup(df_sugar)
df_ve <- subset(df, Ingredient == "vanilla")
df_sugar <- subset(df, Ingredient == "sugar")
View(df_sugar)
table(df_sugar$Unit)
df_sugar <- tbsp2cup(df_sugar)
df_sugar <- tsp2cup(df_sugar)
df_ve <- subset(df, Ingredient == "vanilla")
table(df_ve$Unit)
df_ve <- cup2tbsp(df_ve)
df_ve <- tbsp2tsp(df_ve)
df_ve <- subset(df_ve, Unit != "ounce")
df_flour <- subset(df, Ingredient == "all purpose flour")
table(df_flour$Unit)
df_flour <- tbsp2cup(df_flour)
df_salt <- subset(df, Ingredient == "salt")
table(df_salt$Unit)
df_salt <- tbsp2tsp(df_salt)
df_salt <- subset(df_salt, Unit != "cup")
df_brsug <- subset(df, Ingredient == "brown sugar")
table(df_brsug$Unit)
df_brsug <- tbsp2cup(df_brsug)
df_butter <- subset(df, Ingredient == "butter")
table(df_butter$Unit)
df_butter <- tbsp2cup(df_butter)
df_butter <-subset(df_butter, !(Unit %in% c("ounce","pound")))
df_walnuts <- subset(df, Ingredient == "walnut")
table(df_walnuts$Unit)
scaled_df <- rbind(df_walnuts,df_butter,df_brsug, df_salt, df_flour, df_ve, df_egg, df_bs, df_sugar, df_choc)
scaled_df$Quantity <- as.numeric(scaled_df$Quantity)
scaled_df$Rating <- as.numeric(scaled_df$Rating)
scaled_df <- within(scaled_df, stan <- ave(Quantity, Ingredient, FUN = stdz)) %>%
subset(abs(stan) <= 3) # Because anything more than 3 std. deviations out of the mean is likely to be a scaling error, remove these
summary_stat <- scaled_df %>% group_by(Ingredient) %>% summarise(mean = mean(Quantity, na.rm = TRUE),
median = median(Quantity, na.rm = TRUE),
w_mean = weighted.mean(Quantity, Rating))
summary_stat
ggplot(scaled_df, aes(Ingredient, Quantity, colour = Rating)) +
geom_quasirandom()
scaled_df <- within(scaled_df, stan <- ave(Quantity, Ingredient, FUN = stdz)) %>%
subset(abs(stan) <= 3) # Because anything more than 3 std. deviations out of the mean is likely to be a scaling error, remove these
scaled_df2 <- subset(scaled_df, Rating > 0)
weighted <- subset(scaled_df, Rating > 0) %>% group_by(Ingredient) %>%
summarise(avg = weighted.mean(Quantity, Rating, na.rm = TRUE))
summary_stat$w_mean <- weighted$avg
summary_stat
summary_stat
ggplot(scaled_df, aes(Ingredient, Quantity, colour = Rating)) +
geom_quasirandom()
ggplot(subset(scaled_df, Rating > 0 ), aes(Ingredient, Quantity, colour = Rating)) +
geom_quasirandom()
scaled_df <- within(scaled_df, stan <- ave(Quantity, Ingredient, FUN = stdz)) %>%
subset(abs(stan) <= 3) # Because anything more than 3 std. deviations out of the mean is likely to be a scaling error, remove these
summary_stat <- scaled_df %>% group_by(Ingredient) %>% summarise(mean = mean(Quantity, na.rm = TRUE),
median = median(Quantity, na.rm = TRUE))
weighted <- subset(scaled_df, Rating > 0) %>% group_by(Ingredient) %>%
summarise(avg = weighted.mean(Quantity, Rating, na.rm = TRUE))
summary_stat$w_mean <- weighted$avg
summary_stat
ggplot(subset(scaled_df, Rating > 0 ), aes(Ingredient, Quantity, colour = Rating)) +
geom_quasirandom()
scaled_df <- within(scaled_df, stan <- ave(Quantity, Ingredient, FUN = stdz)) %>%
subset(abs(stan) <= 3) # Because anything more than 3 std. deviations out of the mean is likely to be a scaling error, remove these
summary_stat <- scaled_df %>% group_by(Ingredient) %>% summarise(mean = mean(Quantity, na.rm = TRUE),
median = median(Quantity, na.rm = TRUE))
weighted <- subset(scaled_df, Rating > 0) %>% group_by(Ingredient) %>%
summarise(avg = weighted.mean(Quantity, Rating, na.rm = TRUE))
summary_stat$w_mean <- weighted$avg
summary_stat
ggplot(subset(scaled_df, Rating > 0 ), aes(Ingredient, Quantity, colour = Rating)) +
geom_quasirandom()
head(scaled_df)
num_ingred <- scaled_df %>% group_by(Recipe_Index) %>% (num = n())
num_ingred <- scaled_df %>% group_by(Recipe_Index) %>% (num = count())
num_ingred <- scaled_df %>% group_by(Recipe_Index) %>% (num = n())
num_ingred <- scaled_df %>% group_by(Recipe_Index) %>% summarise(num = n())
num_ingred
mean(num_ingred$num)
new_data <- num_ingred[order(num),]
new_data <- num_ingred[order(num_ingred$num),]
head(new_data)
View(df)
num_ingred <- scaled_df %>% group_by(Recipe_Index) %>% summarise(length(Ingredients))
num_ingred <- scaled_df %>% group_by(Recipe_Index) %>% summarise(length(Ingredient))
mean(num_ingred$num)
num_ingred
View(scaled_df)
View(df_egg)
scaled_df <- rbind(df_walnuts,df_butter,df_brsug, df_salt, df_flour, df_ve, df_egg, df_bs, df_sugar, df_choc)
scaled_df$Quantity <- as.numeric(scaled_df$Quantity)
scaled_df$Rating <- as.numeric(scaled_df$Rating)
View(scaled_df)
num_ingred <- df %>% group_by(Recipe_Index) %>% summarise(length(Ingredient))
mean(num_ingred$num)
num_ingred <- df %>% group_by(Recipe_Index) %>% summarise(num = n())
mean(num_ingred$num)
length(unique(scaled_df$Ingredient))
scaled_df <- within(scaled_df, stan <- ave(Quantity, Ingredient, FUN = stdz)) %>%
subset(abs(stan) <= 3) # Because anything more than 3 std. deviations out of the mean is likely to be a scaling error, remove these
summary_stat <- scaled_df %>% group_by(Ingredient) %>% summarise(mean = mean(Quantity, na.rm = TRUE),
median = median(Quantity, na.rm = TRUE))
weighted <- subset(scaled_df, Rating > 0) %>% group_by(Ingredient) %>%
summarise(avg = weighted.mean(Quantity, Rating, na.rm = TRUE))
summary_stat$w_mean <- weighted$avg
summary_stat
ggplot(subset(scaled_df, Rating > 0 ), aes(Ingredient, Quantity, colour = Rating)) +
geom_quasirandom()
scaled_df <- within(scaled_df, stan <- ave(Quantity, Ingredient, FUN = stdz)) %>%
subset(abs(stan) <= 3) # Because anything more than 3 std. deviations out of the mean is likely to be a scaling error, remove these
scaled_df <- rbind(df_walnuts,df_butter,df_brsug, df_salt, df_flour, df_ve, df_egg, df_bs, df_sugar, df_choc)
scaled_df$Quantity <- as.numeric(scaled_df$Quantity)
scaled_df$Rating <- as.numeric(scaled_df$Rating)
scaled_df <- within(scaled_df, stan <- ave(Quantity, Ingredient, FUN = stdz)) %>%
subset(abs(stan) <= 3) # Because anything more than 3 std. deviations out of the mean is likely to be a scaling error, remove these
summary_stat <- scaled_df %>% group_by(Ingredient) %>% summarise(mean = mean(Quantity, na.rm = TRUE),
median = median(Quantity, na.rm = TRUE))
weighted <- subset(scaled_df, Rating > 0) %>% group_by(Ingredient) %>%
summarise(avg = weighted.mean(Quantity, Rating, na.rm = TRUE))
summary_stat$w_mean <- weighted$avg
summary_stat
ggplot(subset(scaled_df, Rating > 0 ), aes(Ingredient, Quantity, colour = Rating)) +
geom_quasirandom()
scaled_df <- within(scaled_df, stan <- ave(Quantity, Ingredient, FUN = stdz)) %>%
subset(abs(stan) <= 3) # Because anything more than 3 std. deviations out of the mean is likely to be a scaling error, remove these
max(scaled_df$Quantity)
ggplot(subset(scaled_df, Rating > 0 ), aes(Ingredient, Quantity, colour = Rating)) +
geom_quasirandom()
summary_stat <- scaled_df %>% group_by(Ingredient) %>% summarise(mean = mean(Quantity, na.rm = TRUE),
median = median(Quantity, na.rm = TRUE))
weighted <- subset(scaled_df, Rating > 0) %>% group_by(Ingredient) %>%
summarise(avg = weighted.mean(Quantity, Rating, na.rm = TRUE))
summary_stat$w_mean <- weighted$avg
summary_stat
ggplot(subset(scaled_df, Rating > 0 ), aes(Ingredient, Quantity, colour = Rating)) +
geom_quasirandom()
num_recipe <- length(unique(df$Recipe_Index))
num_recipe
